import os
import discord
import random
import mysql.connector
import requests, json
from dotenv import load_dotenv
from discord.ext import commands



load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
GUILD = os.getenv('DISCORD_GUILD')

# every command must be preceded by the prefix defined here.
bot = commands.Bot(command_prefix='!', intents=discord.Intents.all())

@bot.event
async def on_ready():
    # for guild in client.guilds:
    #     if guild.name == GUILD:
    #         break

    # guild = discord.utils.find(lambda g: g.name == GUILD, client.guilds)
    guild = discord.utils.get(bot.guilds, name=GUILD)


    print (
        f'{bot.user.name} is connected to the following guild:\n'
        f'{guild.name}(id: {guild.id})'
    )

    members = '\n - '.join([member.name for member in guild.members])
    print (f'Guild Members:\n - {members}') 


@bot.event
async def on_member_join(member):
    await member.create_dm()
    await member.dm_channel.send(
        f'Hi {member.name}, welcome to my Discord server!'
    )

# This function gets called only when the message "99" was sent by the user.
@bot.command(name = "99", help="Responds with random message generated by the bot")
async def nine_nine(ctx):
    brooklyn_99_quotes = [
        "I\'m the human form of ðŸ’¯ emoji.",
        "Bingpot!",
        (
            "Cool. Cool cool cool cool cool, "
            "no doubt no doubt no doubt"
        ),
    ]

    response = random.choice(brooklyn_99_quotes)
    await ctx.send(response)

@bot.command(name="roll", help="simulates rolling dice")
async def roll_dice(ctx, num_dice: int, num_sides: int):
    dice = [
        str(random.choice(range(1, num_sides + 1)))
        for _ in range (num_dice)
    ]

    await ctx.send(", ".join(dice))

@bot.command(name="create-channel")
@commands.has_role("admin")
async def create_channel(ctx, channel_name):
    guild = ctx.guild
    existing_channel = discord.utils.get(guild.channels, name=channel_name)
    if not existing_channel:
        print(f'Creating a new channel: {channel_name}')
        await guild.create_text_channel(channel_name)
        await ctx.send("A new channel has successfully been created!!")

@bot.command(name="database")
@commands.has_role("admin")
async def print_data(ctx):
    mydb = mysql.connector.connect(
        host="localhost",
        user="root",
        password=os.getenv("MYSQL_PASS")
    )

    print(mydb)

@bot.command(name="weather")
async def askWeatherOptions(ctx):

    try:
        time = await askQuestion(ctx, f"{ctx.author.mention} Type C if you want to know current weather, F if you want to know the forecast")
        city = await askQuestion(ctx, 
                                 f"{ctx.author.mention} Which city at which you want to know the weather? (wrap it with quotation marks if the city name consists of more than two words)")
    except Exception as e:
        if isinstance(e, ValueError):
            await ctx.send("Please type in the correct value")
    
    else:
        if time != "C" and time != "F":
            await ctx.send("Please type in correct value")
            return
        
        await tell_weather(ctx, time, city)

async def askQuestion(ctx, message : str):
    def check(m):
        return m.author == ctx.author and m.channel == ctx.channel
    
    await ctx.send(message)

    try:
        response = await bot.wait_for("message", check=check, timeout=60.0)
    except TimeoutError:
        await ctx.send("Your session has been expired...")
        return
    
    else:
        return response.content

async def tell_weather(ctx, time : str, city : str):
    if time == "C":
        time = "current"
    elif time == "F":
        time = "forecast"
    URL = os.getenv("WEATHER_URL") + f'/{time}' + "?access_key=" + os.getenv("WEATHER_API_KEY") + "&query=" + city
    response = requests.get(URL)
    
    if response.status_code == 200:
        data = response.json()
        main = data["current"]
        observation_time = data["location"]["localtime"]
        description = main["weather_descriptions"]
        temperature = main["temperature"]
        precipitation = main["precip"]

        if time == "current":
            embed = discord.Embed(title=f"Today's weather at {city}")
        else:
            embed = discord.Embed(title=f"Weather forecast at {city}")
        
        embed.add_field(name="Weather: ", value=description[0], inline=True)
        embed.add_field(name="temperature: ", value=temperature, inline=True)
        embed.add_field(name="precipitation: ", value=precipitation, inline=True)
        embed.add_field(name="observed at: ", value=observation_time, inline=True)

        await ctx.send(embed=embed)

    else:
        await ctx.send("error in HTTP request")


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.errors.CheckFailure):
        await ctx.send("You do not have correct role for this command.")

# # This function gets called regardless of its content.
# @bot.event
# async def on_message(message):
#     if message.author == bot.user:
#         return
    
#     brooklyn_99_quotes = [
#         "I\'m the human form of ðŸ’¯ emoji.",
#         "Bingpot!",
#         (
#             "Cool. Cool cool cool cool cool, "
#             "no doubt no doubt no doubt"
#         ),
#     ]

#     if message.content == "99!":
#         response = random.choice(brooklyn_99_quotes)
#         await message.channel.send(response)
#     elif message.content == "exception":
#         raise discord.DiscordException

@bot.event
async def on_error(event, *args, **kwargs):
    with open("err.log", "a") as f:
        if event == "on_message":
            f.write(f'Unhandled message: {args[0]}\n')
        else:
            raise

bot.run(TOKEN)